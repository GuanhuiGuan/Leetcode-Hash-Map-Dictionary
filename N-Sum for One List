class Solution:
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        def nSum(N, nums, target, subList, List):#void return function
            if(N < 2 or len(nums) < N or N * nums[0] > target or N * nums[-1] < target):#Corner cases or target out of range
                return;
            if(N == 2):
                #2sum
                i, j = 0, len(nums) - 1;
                while(i < j):
                    if(nums[i] + nums[j] == target):
                        List.append(subList + [nums[i], nums[j]]);
                        i += 1;
                        while(i < j and nums[i - 1] == nums[i]):#duplicate elements
                            i += 1;
                    elif(nums[i] + nums[j] < target):
                        i += 1;
                    else:
                        j -= 1;
            else:
                #reduce to (N-1)sum till 2sum
                for k in range(len(nums) - N + 1):#how many pairs of size N in nums
                    if(k == 0 or (k > 0 and nums[k - 1] != nums[k])):#skip duplicate starting element
                        nSum(N - 1, nums[k + 1:], target - nums[k], subList + [nums[k]], List);
                    
        nums = sorted(nums);
        List = [];
        nSum(4, nums, target, [], List);
        return List;
        
    
//JAVA            
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        //MAIN
        List<Integer> sublist = new ArrayList<Integer>();
        List<List<Integer>> LIST = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        nSum(4, nums, target, sublist, LIST);
        return LIST;
    }
    //Define function n-sum
    public static void nSum(int N, int[] nums, int target, List<Integer> sublist, List<List<Integer>> LIST) {
        int n = nums.length;
        if(N < 2 || N > n || target < N * nums[0] || target > N * nums[n - 1]){return;}//corner cases
        if(N == 2) {//2-sum
            int i = 0, j = n - 1;
            while(i < j){
                if(nums[i] + nums[j] == target){
                    List<Integer> newsub = new ArrayList<Integer>(sublist);//preserve the previous sublist
                    newsub.add(nums[i]);
                    newsub.add(nums[j]);
                    LIST.add(newsub);
                    i++;
                    while(i < j && nums[i] == nums[i - 1]){i++;}//skip duplicates
                }
                else if(nums[i] + nums[j] < target){i++;}
                else{j--;}
            }
        }
        else{//reduce to N-1
            for(int k = 0; k < n - N + 1; k++){
                if(k == 0 || (k > 0 && nums[k] != nums[k - 1])){//skip duplicate first element
                    List<Integer> newsub = new ArrayList<Integer>(sublist);
                    newsub.add(nums[k]);
                    nSum(N - 1, Arrays.copyOfRange(nums, k + 1, n), target - nums[k], newsub, LIST);
                }
            }
        }
    }
}
